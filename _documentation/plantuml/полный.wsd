@startuml full_s

package node <<Node>> {
    package SR_config <<Rectangle>> {
        struct "Описание\nкоммутируемой\nпеременной" as link_var_discriptor {
            + индекс_в_буфере
            + значение_связи
        }
        
        class "Коммуникатор" as Link_MPI {
            - номер_узла : int
            - список_на_передачу : 
            std::vector<Описание коммутируемой переменной>*
            - список_на_приём :
            std::vector<Описание коммутируемой переменной>*
            + размер_буфера_на_передачу : int
            + размер_буфера_на_приём : int
            + буфер_на_передачу : float*
            + буфер_на_приём : float*
            __
            + Конструктор(номер_узла : int)
            + Деструктор()

            .. Прочие служебные функции ..
        }
        
        struct "Описание \nпеременной" as SR_var_descriptor {
            + имя_переменной : const char*
            + имя_алгоритма : const char*
            + счётчик_использований : size_t
            + значение_связи : float*
        }
        
        class "Посредник" as SR_var_list {
            - список_входов : 
            std::vector<Описание переменной>*
            - список_выходов : 
            std::vector<Описание переменной>*
            - массив_значений_связей : float*

            - список_требуемых_переменных : 
            std::vector<Описание переменной>*
            - массив_значений_требуемых_связей : float*
            __
            + Конструктор()
            + Деструктор()
            .. Прочие служебные функции ..
            + регистрация_входов(имя_алгоритма : const char*, 
            имя_входа : const char*, вход : float**) : void
            + регистрация_выходов(имя_алгоритма : const char*, 
            имя_выхода : const char*, выход : float**) : void
            + создание_связей() : void
        }
        note bottom of SR_var_list : Посредник заведует\nпортами и связями\nвсех алгоритмов
        note left of SR_var_list::создание_связей
            Выделение памяти 
            под выходные переменные
            и связывание со входными
        end note
        
        class "Настройки" as SR_Settings {
            + список_локальных_переменных : Посредник*

            + Конструктор()
            + Деструктор()
            + поиск_алгоритмов(список_алгоритмов : Алгоритм***) : size_t
        }
    }

    package alg_base <<Rectangle>> {
        abstract "Алгоритм" as SR_calc_proc {
            # список_имён_уставок : std::vector<const char*>*
            # список_уставок : std::vector<float**>*
            # список_имён_входов : std::vector<const char*>*
            # список_входов : std::vector<float**>*
            # список_имён_выходов : std::vector<const char*>*
            # список_выходов : std::vector<float**>*
            + период_расчёта : int
            + имя_алгоритма : const char*
            + флаг_готовности : bool
            __
            # добавление_уставки(уставка : float**, имя : const char*, 
            начальное_значение : float) : void
            # добавление_входа(вход : float**, 
            имя : const char*) : void
            # добавление_выхода(выход : float**, 
            имя : const char*) : void
            + Конструктор()
            + Деструктор()
            + регистрация_переменных(посредник : Посредник*) : int
            .. Прочие функции для взаимодействия с алгоритмами ..
            + {abstract} расчёт() : void
        }
        note right of SR_calc_proc : Базовый \nфункционал \nалгоритмов
        note left of SR_calc_proc::Конструктор()
            Выделение памяти под списки
        end note
        note left of SR_calc_proc::период_расчёта
            Параметр определяет 
            категорию "быстрый/медленный".
            Задаётся номинальный такт расчёта в мс.
        end note
        note left of SR_calc_proc::флаг_готовности
            Алгоритм не работает, 
            если его входы не подключены
        end note
    }

    package SR_ctl <<Rectangle>> {
        class "Создатель" as SR_ctl_type {
            - связи_MPI : Коммуникатор**
            - настройки : Настройки*
            - список_алгоритмов : Алгоритм**
            - фактическое_время_такта : double
            - число_найденных_алгоритмов : size_t

            + Конструктор()
            + Деструктор()
            + инициализация() : void
            + работа() : void
        }
        note left of SR_ctl_type::инициализация()
            Поиск алгоритмов,
            регистрация их переменных 
            и создание связей
        end note
        note left of SR_ctl_type::работа()
            Запуск алгоритмов на выполнение
            в порядке агрегации
        end note
    }

    class "Алгоритм" as SR_auto_ctl {
        -Вход_1
        -Вход_I
        -Выход_1
        -Выход_O
        +Конструктор()
        +Деструктор()
        +{abstract}Расчёт()
    }
    note left of SR_auto_ctl::Конструктор()
        Добавление входов, выходов и уставок
    end note
    note left of SR_auto_ctl::расчёт()
        Реализация расчётной процедуры
    end note
    note right of SR_auto_ctl : Расширенный \nфункционал \nалгоритмов
}




SR_ctl_type::связи_MPI o--> "0..*" Link_MPI
SR_ctl_type::настройки *--> "1" SR_Settings
SR_ctl_type::список_алгоритмов o--> "0..*" SR_calc_proc : Агрегация \nалгоритмов

Link_MPI ..> link_var_discriptor
SR_var_list ..> SR_var_descriptor

SR_Settings *--> "1" SR_var_list
SR_Settings::поиск_алгоритмов ..> SR_calc_proc : Поиск \nалгоритмов

SR_var_list <.. SR_calc_proc::регистрация_переменных : Регистрация \nпеременных

SR_calc_proc <|-- SR_auto_ctl
SR_calc_proc <|-- SR_auto_ctl
SR_calc_proc <|-- SR_auto_ctl

@enduml
